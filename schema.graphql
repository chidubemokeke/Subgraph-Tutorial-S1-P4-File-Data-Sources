# Enum for Transaction Types
# This defines an enumeration called TransactionType.
# Enums are a way to define a set of named values.
# In this case, the values are TRADE and MINT, which represent different types of transactions.
enum TransactionType {
  TRADE # Represents a sale transaction where an NFT is sold
  MINT # Represents a mint transaction where a new NFT is created
  Transfer # Represents when an NFT is transferred without being sold on OpenSea
}

# Definition of the Account entity
type Account @entity {
  "A unique identifier for each account"
  id: ID!

  "Array of CovenTokens sent by the account"
  sent: [CovenToken!]! @derivedFrom(field: "from")

  "Array of CovenTokens received by the account"
  received: [CovenToken!]! @derivedFrom(field: "to")

  "Transaction counts for the account, including minting, buying, selling, and other activities"
  transactionCount: BigInt!
  mintCount: BigInt!
  buyCount: BigInt!
  saleCount: BigInt!

  "True if the account has only minted at least one Token and holds"
  isOG: Boolean
  "True if the account has minted one or more Tokens and has bought in OpenSea and holds"
  isCollector: Boolean
  "True if the account has minted one or more Tokens and sold one or more Tokens on OpenSea but doesn't buy"
  isHunter: Boolean
  "True if the account has minted one or more Tokens and sold and bought one or more Tokens on OpenSea"
  isFarmer: Boolean
  "True if the account only bought and sold at least one Token in OpenSea"
  isTrader: Boolean

  "Aggregated transaction fields"
  totalAmountBought: BigInt! # The total value of NFTs bought
  totalAmountSold: BigInt! # The total value of NFTs sold
  totalAmountBalance: BigInt! # The total balance of the account in terms of cryptocurrency
  "Array of transactions associated with the account"
  transactions: [Transaction!]! @derivedFrom(field: "account")
  history: [AccountHistory!]! @derivedFrom(field: "history") # One-to-Many relationship: An account can have multiple historical records (Mints/Buys/Sales)
  "Transaction details for tracking changes"
  logIndex: BigInt! # Index of the log within the transaction
  txHash: Bytes!
  blockNumber: BigInt! # The block number when this entity was last updated. Helps in tracking historical changes.
  blockTimestamp: BigInt!
}

# AccountHistory Entity to track historical records and update account types
type AccountHistory @entity {
  "Unique identifier for the history record combining TxHash and logIndex"
  id: ID!

  "Reference to the associated account"
  history: Account!

  "Current owner of the NFT for historical analysis"
  owner: Bytes!

  "Transaction counts at the time of the history record"
  mintCount: BigInt! # Mint count at the time of the history record
  buyCount: BigInt! # Buy count at the time of the history record
  saleCount: BigInt! # Sale count at the time of the history record
  "The type of account at the time of the history record"
  accountType: String!

  "Transaction details for tracking historical changes"
  logIndex: BigInt! # Index of the log within the transaction
  txHash: Bytes!
  blockNumber: BigInt! # Block number when this entity was last updated
  blockTimestamp: BigInt! # Timestamp of the block when this entity was last updated
}

# Represents Coven token transfer events
type CovenToken @entity {
  "Unique identifier for the token transfer event combining TxHash and logIndex"
  id: ID!

  "Reference to the accounts involved in the transfer"
  from: Account! # Sender's address
  to: Account! # Receiver's address
  "New owner of the token"
  owner: Bytes!

  "The ID of the token"
  tokenId: String!

  "Total number of times the NFT has been minted"
  tokenMintCount: BigInt!

  "Transaction details for tracking changes"
  logIndex: BigInt! # Index of the log within the transaction
  txHash: Bytes!
  blockNumber: BigInt! # Block number when this entity was last updated
  blockTimestamp: BigInt! # Timestamp of the block when this entity was last updated
}

# Definition of the Transaction entity
type Transaction @entity {
  "Unique identifier for the transaction combining TxHash and logIndex"
  id: ID!

  "Reference to the associated account"
  account: Account!

  "Reference to the corresponding event/transaction in the contract"
  referenceId: String!

  "Type of transaction defined by the enum"
  transactionType: TransactionType!

  "Addresses involved in the sale transaction"
  buyer: Bytes! # Address of the buyer (for sales)
  seller: Bytes! # Address of the seller (for sales)
  "NFT sale transaction details"
  nftSalePrice: BigInt! # Amount of the NFT Tokens sold
  totalNFTsSold: BigInt! # Total number of NFTs sold in this transaction
  "Aggregated data fields"
  totalSalesVolume: BigInt! # Total amount sold across all transactions
  averageSalePrice: BigDecimal! # Average price of NFTs sold
  totalSalesCount: BigInt! # Total number of NFT sales
  highestSalePrice: BigInt! # Highest sale price of an NFT
  lowestSalePrice: BigInt! # Lowest sale price of an NFT
  "Transaction details for tracking changes"
  logIndex: BigInt! # Index of the log within the transaction
  txHash: Bytes!
  blockNumber: BigInt! # Block number when this entity was last updated
  blockTimestamp: BigInt! # Timestamp of the block when this entity was last updated
}

# Enum for Transaction Types
# This defines an enumeration called TransactionType.
# Enums are a way to define a set of named values.
# In this case, the values are TRADE, MINT and TRANSFER which represent different types of transactions.
enum TransactionType {
  TRADE # Represents a sale transaction where an NFT is sold
  MINT # Represents a mint transaction where a new NFT is created
  Transfer # Represents when an NFT is transferred without being sold on OpenSea
}

# Definition of the Account entity
# Represents an account that interacts with NFTs, either through minting, buying, selling, or transferring
type Account @entity {
  "A unique identifier for each account, typically the Ethereum address"
  id: ID!

  "Array of CovenTokens sent by the account"
  sent: [CovenToken!]! @derivedFrom(field: "from")

  "Array of CovenTokens received by the account"
  received: [CovenToken!]! @derivedFrom(field: "to")

  # Aggregated transaction counts for the account
  "Number of all types of transactions involving the account"
  transactionCount: BigInt!
  "Number of tokens minted by the account"
  mintCount: BigInt!
  "Number of tokens bought by the account"
  buyCount: BigInt!
  "Number of tokens sold by the account"
  saleCount: BigInt!

  # Booleans to categorize the account based on its behavior
  "True if the account has only minted at least one token and holds"
  isOG: Boolean
  "True if the account has minted one or more tokens, bought on OpenSea, and holds"
  isCollector: Boolean
  "True if the account has minted one or more tokens and sold one or more tokens on OpenSea but doesn't buy"
  isHunter: Boolean
  "True if the account has minted one or more tokens and both sold and bought one or more tokens on OpenSea"
  isFarmer: Boolean
  "True if the account has only bought and sold at least one token on OpenSea"
  isTrader: Boolean

  # Financial details aggregated for the account
  "Total value of NFTs bought by the account"
  totalAmountBought: BigInt!
  "Total value of NFTs sold by the account"
  totalAmountSold: BigInt!
  "Total balance of the account in terms of cryptocurrency"
  totalAmountBalance: BigInt!

  # Arrays of related entities
  "Array of transactions associated with the account"
  transactions: [Transaction!]! @derivedFrom(field: "account")
  "Historical records of the account's transactions and changes in status"
  history: [AccountHistory!]! @derivedFrom(field: "history")

  # Transaction details to track the changes
  "Index of the log within the transaction for this account"
  logIndex: BigInt!
  "Hash of the transaction where this account was last updated"
  txHash: Bytes!
  "Block number when this account entity was last updated"
  blockNumber: BigInt!
  "Timestamp of the block when this account entity was last updated"
  blockTimestamp: BigInt!
}

# Entity to represent the historical state of an account
# Useful for tracking changes in account behavior and status over time
type AccountHistory @entity {
  "Unique identifier for the history record combining TxHash and logIndex"
  id: ID!

  "Reference to the associated account"
  history: Account!

  "The current owner of the NFT for historical analysis"
  owner: Bytes!

  # Transaction counts at the time of the historical record
  "Mint count at the time of the history record"
  mintCount: BigInt!
  "Buy count at the time of the history record"
  buyCount: BigInt!
  "Sale count at the time of the history record"
  saleCount: BigInt!

  # String field to capture the type of account at the time of the historical record
  "The type of account at the time of the history record"
  accountType: String!

  # Transaction details for tracking changes over time
  "Index of the log within the transaction for historical analysis"
  logIndex: BigInt!
  "Hash of the transaction when this history record was created"
  txHash: Bytes!
  "Block number when this history entity was last updated"
  blockNumber: BigInt!
  "Timestamp of the block when this history entity was last updated"
  blockTimestamp: BigInt!
}

{
 # Token-related data
  "The unique ID of the token being transferred"
  tokenId: String!
  "Total number of times the token has been minted"
  tokenMintCount: BigInt!

  # Transaction details for tracking changes related to the token
  "Index of the log within the transaction for token tracking"
  logIndex: BigInt!
  "Hash of the transaction for the token transfer"
  txHash: Bytes!
  "Block number when this token entity was last updated"
  blockNumber: BigInt!
  "Timestamp of the block when this token entity was last updated"
  blockTimestamp: BigInt!
}



# Definition of the Transaction entity to represent NFT transactions
# A transaction can be of type TRADE, MINT, or TRANSFER
type Transaction @entity {
  "Unique identifier for the transaction combining TxHash and logIndex"
  id: ID!

  "Reference to the account involved in the transaction"
  account: Account!

  "The ID of the token extracted from the event logs"
  referenceId: String!

  # Enum field to denote the type of transaction
  "Type of transaction defined by the enum"
  transactionType: TransactionType!

  # Addresses involved in the sale transaction
  "Address of the buyer in the sale"
  buyer: Bytes!
  "Address of the seller in the sale"
  seller: Bytes!

  # Financial data for the sale transaction
  "Price at which the NFT was sold"
  nftSalePrice: BigInt!
  "Total number of NFTs sold in this transaction"
  totalNFTsSold: BigInt!

  # Aggregated data fields for the transaction
  "Total amount sold across all transactions"
  totalSalesVolume: BigInt!
  "Average price of NFTs sold"
  averageSalePrice: BigDecimal!
  "Total number of NFT sales"
  totalSalesCount: BigInt!
  "Highest sale price of an NFT"
  highestSalePrice: BigInt!
  "Lowest sale price of an NFT"
  lowestSalePrice: BigInt!

  # Transaction details to track changes
  "Index of the log within the transaction for tracking"
  logIndex: BigInt!
  "Hash of the transaction"
  txHash: Bytes!
  "Block number when this transaction entity was last updated"
  blockNumber: BigInt!
  "Timestamp of the block when this transaction entity was last updated"
  blockTimestamp: BigInt!
}

# Enum for Transaction Types
# This defines an enumeration called TransactionType.
# Enums are a way to define a set of named values.
# In this case, the values are TRADE and MINT, which represent different types of transactions.
enum TransactionType {
  TRADE # Represents a sale transaction where an NFT is sold
  MINT # Represents a mint transaction where a new NFT is created
}

# Definition of the Account entity
type Account @entity {
  id: ID! # A unique identifier for each account.
  buyCount: BigInt # The total number of NFTs purchased by this account.
  saleCount: BigInt # The total number of NFTs sold by this account.
  mintCount: BigInt # The total number of NFTs minted by this account.
  isOG: Boolean # True if the account only mints and holds
  isCollector: Boolean # True if the account only mints/buys and holds
  isHunter: Boolean # True if the account mints and sells but doesn't buy/sell more
  isFarmer: Boolean # True if the account mints, sells, and engages in other transactions
  isTrader: Boolean # True if the account only trades on OpenSea
  totalAmountBought: BigInt # The total value of NFTs bought
  totalAmountSold: BigInt # The total value of NFTs sold
  totalAmountBalance: BigInt # The total balance of the account in terms of cryptocurrency.
  blockNumber: BigInt! # The block number when this entity was last updated. Helps in tracking historical changes.
  blockTimestamp: BigInt! # The timestamp of the block when this entity was last updated. Provides a time reference.
  # nfts: [NFT!]! @derivedFrom(field: "currentOwner") # List of NFTs currently owned by this account.
  transactions: [Transaction!]! @derivedFrom(field: "account") # List of transactions associated with this account.
}

# The CovenToken entity represents a minted token.
type TokenEvent @entity {
  id: ID! # Unique identifier for the token (combination of contract address and tokenId).
  tokenId: BigInt! # The ID of the token.
  contractAddress: Bytes! # The address of the contract where the token was minted.
  owner: Bytes! # The current owner of the token.
}

# Definition of the Transaction entity
type Transaction @entity {
  id: ID! # A unique identifier for each transaction.
  account: Account! # Reference to the Account entity involved in this transaction.
  from: Bytes! # The address of the sender if the transaction involves a mint.
  to: Bytes! # The address of the receiver of a mint
  tokenId: BigInt! # The unique identifier of the NFT being transferred.
  type: TransactionType! # The type of the transaction, using the TransactionType enum defined earlier.
  buyer: Bytes # The address of the buyer (for sales).
  seller: Bytes # The address of the seller (for sales).
  #nft: NFT! # Reference to the NFT entity involved in this transaction.
  nftSalePrice: BigInt # The amount of the NFT sold (relevant for sales).
  totalSold: BigInt # The total amount of NFTs sold in this transaction (relevant for sales).
  blockNumber: BigInt! # The block number when this transaction was recorded. Helps in tracking historical data.
  blockTimestamp: BigInt! # The timestamp of the block when this transaction was recorded. Provides a time reference.
  # More aggregatedata fields
  totalSalesVolume: BigInt # Aggregates the total amount sold across all transactions
  averageSalePrice: BigInt # Calculates the average price of NFTs sold.
  totalSalesCount: BigInt # Tracks the total number of NFT sales.
  highestSalePrice: BigInt # Records the highest sale price of an NFT.
  lowestSalePrice: BigInt # Records the lowest sale price of an NFT.
}
